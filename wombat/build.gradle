import edu.wpi.first.toolchain.NativePlatforms

apply plugin: 'org.ysb33r.doxygen'
apply plugin: 'cpp'
apply plugin: 'google-test-test-suite'
apply plugin: 'edu.wpi.first.GradleRIO'

model {
  components {
    Wombat(NativeLibrarySpec) {
      targetPlatform NativePlatforms.desktop
      targetPlatform NativePlatforms.roborio 

      sources {
        sources.cpp {
          source {
            srcDir 'src/main/cpp'
            include '**/*.cpp', '**/*.cc'
          }

          exportedHeaders {
            srcDir 'src/main/include'
          }
        } 
      }

      binaries.all {
        if (it.targetPlatform.name == "linuxathena")
          cppCompiler.define "PLATFORM_ROBORIO"
        else
          cppCompiler.define "PLATFORM_DESKTOP"
      }

      wpi.cpp.vendor.cpp(it)
      wpi.cpp.deps.wpilib(it)
    }
  }
  testSuites {
    WombatTest(GoogleTestTestSuiteSpec) {
      testing $.components.Wombat;

      sources.cpp {
        source {
          srcDir 'src/test/cpp'
          include '**/*.cpp'
        }

        exportedHeaders {
          srcDir 'src/test/include'
        }
      }

      wpi.cpp.vendor.cpp(it)
      wpi.cpp.deps.wpilib(it)
      wpi.cpp.deps.googleTest(it)
    }
  }
}

task plot()

def plot_supported = true
try {
    exec {
        commandLine 'gnuplot', '--version'
    }
} catch (e) {
    println "GNUPlot Not Found!"
    plot_supported = false;
}

if (plot_supported) {
    def loadpath = file('src/testplot/')
    println loadpath.absolutePath
    fileTree(dir: loadpath, include: '**/*.plt').files.each { file ->
        def t = tasks.create("plot${file.name.capitalize()}") {
            doLast {
                exec {
                    workingDir new File(project.buildDir, "test-results/wombatTest/windowsx86-64/release")
                    commandLine 'gnuplot', '-e', "set loadpath '${loadpath.absolutePath}';load 'settings.gp'", file.absolutePath
                }
            }
        }
        plot.dependsOn t
    }
}

check.finalizedBy plot